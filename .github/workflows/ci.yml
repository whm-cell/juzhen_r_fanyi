name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libx11-xcb-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libcairo-gobject2 \
          pkg-config \
          clang

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation
      run: cargo check --all-targets --all-features

    - name: Run tests
      run: cargo test --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libx11-xcb-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libcairo-gobject2 \
          pkg-config \
          clang

    - name: Check documentation
      run: cargo doc --all-features --no-deps

    - name: Check for broken links in docs
      run: |
        echo "检查文档中的链接..."
        if [ -f "README.md" ]; then
          echo "✅ README.md 存在"
        fi
        if [ -f "study.md" ]; then
          echo "✅ study.md 存在"
        fi
        if [ -f "项目完成总结.md" ]; then
          echo "✅ 项目完成总结.md 存在"
        fi

  build-test:
    name: Build Test (Debug)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libx11-xcb-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libcairo-gobject2 \
          pkg-config \
          clang

    - name: Build debug version
      run: |
        echo "🔨 构建调试版本..."
        cargo build --verbose
        echo "✅ 调试版本构建成功"

    - name: Check binary size
      run: |
        if [ -f "target/debug/juzhen_r_fanyi" ]; then
          size=$(du -h target/debug/juzhen_r_fanyi | cut -f1)
          echo "📊 调试版本大小: $size"
        fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install MSRV Rust toolchain
      uses: dtolnay/rust-toolchain@1.89.0  # Slint最低要求版本

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libxcursor-dev \
          libxrandr-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libx11-xcb-dev \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev \
          libcairo-gobject2 \
          pkg-config \
          clang

    - name: Check MSRV compatibility
      run: |
        echo "🔍 检查最低支持的Rust版本兼容性..."
        cargo check --all-targets --all-features
        echo "✅ MSRV兼容性检查通过"
